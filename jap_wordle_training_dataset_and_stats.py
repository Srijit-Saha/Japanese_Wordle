# -*- coding: utf-8 -*-
"""Jap_wordle_training_dataset_and_stats.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VJHB17AaIWKAJ-vR79Ht4jXi_GWibbJ9
"""

import json
from pathlib import Path
import random
import csv
from tqdm import tqdm
import statistics

kanjis = []
radicals1= []
with open('out_kanji_radical_mapping2.csv', mode ='r')as file:
  csvFile = csv.reader(file)
  for lines in csvFile:
    kanjis.append(lines[0][0])
    radicals1.append(lines[0][2])
kanjis_set = list(set(kanjis))
radical_set = list(set(radicals1))
k_r_mappings = {i:[] for i in kanjis_set}
for j in range(len(kanjis)):
  k_r_mappings[kanjis[j]].append(radicals1[j])

def jap_dataset(i,lower,capital,mappings):
    capital2 = list(mappings.keys())
    mapp = list(mappings.values())
    radic_list = []
    for kh in mappings.keys():
      for kj in mappings[kh]:
        radic_list.append(kj)
    fre_dict = {}
    for mj in set(radic_list):
      fre_dict[mj] = radic_list.count(mj)
    sort_rad_count = sorted(fre_dict.values(),reverse = True)
    top_2 = []
    for ti in sort_rad_count[:2]:
      top_2.append(list(fre_dict.keys())[list(fre_dict.values()).index(ti)])
    fre_list = []
    for ci in range(len(capital)):
      if all(x in mappings[capital[ci]] for x in top_2):
        fre_list.append(capital[ci])
    fre_list1 = []
    for ci in range(len(capital)):
      if any(x in mappings[capital[ci]] for x in top_2):
        fre_list1.append(capital[ci])
    if len(fre_list) != 0:
      kanji_guess1 = random.sample(fre_list,1)[0]
    else:
      kanji_guess1 = random.sample(fre_list1,1)[0]
    kanji1_dict = {}
    for k in mappings[kanji_guess1]:
      if k in mappings[i]:
        kanji1_dict[k] = 1
      else:
        kanji1_dict[k] = 0
    tru_list = [k for k,v in kanji1_dict.items() if v == 1]
    fal_list = [k for k,v in kanji1_dict.items() if v == 0]
    if len(tru_list) == 0:
      kanji_list1 = []
      for la in range(len(mappings.keys())):
        if any(x in mappings[list(mappings.keys())[la]] for x in fal_list) and list(mappings.keys())[la] in capital2:
          capital2.remove(list(mappings.keys())[la])
      kanji_list1.extend(capital2)
    elif len(tru_list) != 0:
      kanji_list1 = []
      for l in range(len(capital)):
        if all(x in mappings[capital[l]] for x in tru_list):
          kanji_list1.append(capital[l])
      inter_dict = dict(zip(kanji_list1, list(mappings[ia] for ia in kanji_list1)))
      inter_kanji = list(inter_dict.keys())
      for fl in range(len(inter_kanji)):
        if any(x in list(inter_dict.values())[fl] for x in fal_list) and list(inter_dict.keys())[fl] in kanji_list1:
            kanji_list1.remove(inter_kanji[fl])
    if kanji_guess1 in kanji_list1:
      kanji_list1.remove(kanji_guess1)
    radicals = []
    for ml in kanji_list1:
      radicals.append(mappings[ml])
    list_rad = []
    for ml in radicals:
      for mk in ml:
        list_rad.append(mk)
    list_radicals = list(set(list_rad))
    new_dict = dict(zip(kanji_list1,radicals))
    map_radicals = list(kanji1_dict.values())
    return len(fal_list), kanji_guess1, kanji1_dict,list_radicals, kanji_list1, new_dict

kanji_dict = {i:[] for i in k_r_mappings.keys()}
for i in tqdm(range(10)):
  number_guess = []
  for i in list(k_r_mappings.keys()):
    in_dict = {}
    in_dict['guess1'] = jap_dataset(i,radical_set,kanjis_set,k_r_mappings)
    n = 1
    guessed = [in_dict['guess1'][1]]
    radicals_1_0 = [in_dict['guess1'][2]]
    while in_dict['guess'+str(n)][1] != i:
      n = n + 1
      in_dict['guess' + str(n)] = jap_dataset(i,in_dict['guess'+str(n-1)][3],in_dict['guess'+str(n-1)][4],in_dict['guess'+str(n-1)][5])
      guessed.append(in_dict['guess' + str(n)][1])
      radicals_1_0.append(in_dict['guess' + str(n)][2])
      continue
    number_guess.append(n-1)
    i_list = [n,guessed,radicals_1_0]
    kanji_dict[i].append(i_list)

sample_kanji = list(kanji_dict.keys())
number_trials = {i:[] for i in sample_kanji}
for i in sample_kanji:
  for j in range(len(kanji_dict[i])):
    number_trials[i].append(kanji_dict[i][j][0])

kanji_stat = {i:[] for i in sample_kanji}
for i in number_trials.keys():
  max1 = max(number_trials[i])
  min1 = min(number_trials[i])
  mean1 = round(statistics.mean(number_trials[i]),2)
  variance1 = round(statistics.variance(number_trials[i]),2)
  sd1 = round(statistics.stdev(number_trials[i]),2)
  kanji_stat[i] = {'Max':max1,'Min':min1,'Mean':mean1,'Variance':variance1,'SD':sd1}

trial_dict = {i:[] for i in range(1,11)}
for i in range(1,11):
  for j in number_trials.keys():
    trial_dict[i].append(number_trials[j][i-1])
trial_stat = {i:[] for i in trial_dict.keys()}
for i in trial_dict.keys():
  max1 = max(trial_dict[i])
  min1 = min(trial_dict[i])
  mean1 = round(statistics.mean(trial_dict[i]),2)
  variance1 = round(statistics.variance(trial_dict[i]),2)
  sd1 = round(statistics.stdev(trial_dict[i]),2)
  trial_stat[i] = {'Max':max1,'Min':min1,'Mean':mean1,'Variance':variance1,'SD':sd1}